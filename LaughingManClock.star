load("render.star", "render")
load("time.star", "time")
load("encoding/base64.star", "base64")
load("animation.star", "animation")

FRAME_WIDTH = 64
FRAME_HEIGHT = 32

IMAGE_WIDTH = 15
IMAGE_HEIGHT = 9


COLORS = [
    "#0ef",  # light blue
    "#f70",  # orange
    "#02f",  # dark blue
    "#fe0",  # yellow
    "#f20",  # red
    "#f08",  # pink
    "#b0f",  # purple
]


NUM_X_POSITIONS = FRAME_WIDTH - IMAGE_WIDTH
NUM_Y_POSITIONS = FRAME_HEIGHT - IMAGE_HEIGHT
NUM_STATES = NUM_X_POSITIONS * NUM_Y_POSITIONS * len(COLORS) * 2


WHITE = """
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
"""

TINY_WHITE = """
iVBORw0KGgoAAAANSUhEUgAAABIAAAAQCAYAAAAbBi9cAAAACXBIWXMAAAB/AAAAfwG4tsyJAAAAGXRFWHRTb2Z0d2FyZQB3d3cuaW5rc2NhcGUub3Jnm+48GgAAAEV0RVh0VGl0bGUATGF1aGdpbmcgTWFuIExvZ28gZnJvbSBHaG9zdCBJbiBUaGUgU2hlbGwgLSBTdGFuZCBBbG9uZSBDb21wbGV4BD7f5gAAABV0RVh0QXV0aG9yAFBhdWwgTmljaG9sc29ukaK6UgAAAU90RVh0RGVzY3JpcHRpb24ASSAoV2VpcmQgQ29uc3RydWN0b3IpIHRyYWNlZCB0aGUgU1ZHIGJhY2sgaW4gMjAwNiBkaXJlY3RseSBmcm9tIHRoZSBBbmltZS4gSXQgd2FzIGEgbG9uZyB0aW1lIG9ubGluZSBvbiBvbmUgb2YgYSBmcmllbmRzIHdlYnNpdGUuIEkgZGVjaWRlZCB0byB1cGxvYWQgaXQgdG8gR2l0aHViIDIwMTguCgpUaGUgcmlnaHRzIG9mIHRoZSBvcmlnaW5hbCBsb2dvIGFuZCBpdCdzIGNvcHlyaWdodHMgYmVsb25nIHRvIHRoZSBvcmlnaW5hbCBjcmVhdG9yIGFuZCBhbmltZSBzdHVkaW8uIEhvd2V2ZXIsIHRoZXJlIGFyZSBsb3RzIG9mIHBlb3BsZSB3aG8gZG9uJ3QgY2FyZS4uLi6mXH5nAAAAGHRFWHRDcmVhdGlvbiBUaW1lADIwMDYtMDctMDdr3lyuAAAAY3RFWHRDb3B5cmlnaHQAQ0MgQXR0cmlidXRpb24tTm9uQ29tbWVyY2lhbC1TaGFyZUFsaWtlIGh0dHA6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzQuMC9D0yJcAAAB/ElEQVQ4jX2TT0gUUBCHv+euyqqB0SZ2y0MYQh4SIgypW4FUlygKgjwUnmLr0KHDJiTUIaEkiSQKAi/VwYuwl6CiCCz6A+khNAJDqEMhZQTWfl1ma5GtgQcz85v5zZs38xKrRO0EjgA54Ge464AETKWUHq3OWU1Qr55TT6st4cuqudAz6mF1VM3/j2RM3Rx2t3pJfarOqxfUbYGtVcfVDbWIhtTOqHpFXVJH1ANqv3pGnVNvqQ1qi3pdrasm6VJPhj6mvqxVLdq8od5Vk7pdHagOOK82BbBU88p/Y5P6UO0P+3IFywKNKaXvwf4DuK3+cyhAHhhXZ4EOdSMwnAV+RcB74BTwCegCvgILga0DOoDnxWJx98zMzB6gPZPJrBQKhfne3t47lf0A2Ad8A5qBxdC/xFkB3gD5Uqn0MZfLNS0vLze0tbU1l8tlALPRHsAssBUoAG+DoFoywI7p6elBoBGYA3qALcBB1GG1Wd2lLqqD6oLaU/XI69WpmNikeiz8o5WYOmACGEwpPQDuA/uBi0BJfaU+ieofgHdAawykD3hRIUrBPATci4RxoA8Yi4dviILHgc/AIUBgBDiRUir/aT6W7ZraHfZO9ab6TH2tTqh7Y4/ygbVTS4KsqJ5VW2vg9eqAerXWp001EjYBR4E10UI5WisDkymlx7Uu8hu2eZhLNIm8bAAAAABJRU5ErkJggg==
"""



IMAGE_TRANSPARENT = """
iVBORw0KGgoAAAANSUhEUgAAABIAAAAQCAYAAAAbBi9cAAAACXBIWXMAAAFZAAABWQENKMgFAAAAGXRFWHRTb2Z0d2FyZQB3d3cuaW5rc2NhcGUub3Jnm+48GgAAAEV0RVh0VGl0bGUATGF1aGdpbmcgTWFuIExvZ28gZnJvbSBHaG9zdCBJbiBUaGUgU2hlbGwgLSBTdGFuZCBBbG9uZSBDb21wbGV4BD7f5gAAABV0RVh0QXV0aG9yAFBhdWwgTmljaG9sc29ukaK6UgAAAU90RVh0RGVzY3JpcHRpb24ASSAoV2VpcmQgQ29uc3RydWN0b3IpIHRyYWNlZCB0aGUgU1ZHIGJhY2sgaW4gMjAwNiBkaXJlY3RseSBmcm9tIHRoZSBBbmltZS4gSXQgd2FzIGEgbG9uZyB0aW1lIG9ubGluZSBvbiBvbmUgb2YgYSBmcmllbmRzIHdlYnNpdGUuIEkgZGVjaWRlZCB0byB1cGxvYWQgaXQgdG8gR2l0aHViIDIwMTguCgpUaGUgcmlnaHRzIG9mIHRoZSBvcmlnaW5hbCBsb2dvIGFuZCBpdCdzIGNvcHlyaWdodHMgYmVsb25nIHRvIHRoZSBvcmlnaW5hbCBjcmVhdG9yIGFuZCBhbmltZSBzdHVkaW8uIEhvd2V2ZXIsIHRoZXJlIGFyZSBsb3RzIG9mIHBlb3BsZSB3aG8gZG9uJ3QgY2FyZS4uLi6mXH5nAAAAGHRFWHRDcmVhdGlvbiBUaW1lADIwMDYtMDctMDdr3lyuAAAAY3RFWHRDb3B5cmlnaHQAQ0MgQXR0cmlidXRpb24tTm9uQ29tbWVyY2lhbC1TaGFyZUFsaWtlIGh0dHA6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzQuMC9D0yJcAAAAxklEQVQ4jc3SPUrEQBjG8d8sitVeYvEEViIIXsBiiz2ACHsAS0/hMcRK24CIN1hSJ9W2a5PGLdRYZIQYYvbDFHngZT543v+8M/MGlP6vq9ATqOgLJGDeB2h4CviK47Yq2/wjHGKC+w2AJxxH/xkWTUOGV1ziOZ7YjBQXSJDjAed4q3l+JWR/gHJ8NvbesfxZh3itwejoALM9k1+wivMpfGh/l654VP04VSukcI31DpAE41plN6peBCeqvugCFLitVQKnsYi7b8ZWUrUkNGHKAAAAAElFTkSuQmCC
"""




def main():
    timezone = "America/Santiago"
    now = time.now().in_location(timezone)
    return render.Root(
        child=render.Column(
            children=[
                render.Row(
                    cross_align="center",
                    main_align="space_between",
                    children=[
                        get_time(now),
                        laughing(),
                    ],
                ),
            ],
        )
    )


def laughing():
    return animation.Transformation(
        child=render.Image(src=base64.decode(WHITE), height=32),
        duration=60,
        direction="alternate",
        fill_mode="forwards",
        keyframes=[
            animation.Keyframe(
                percentage=0.0,
                transforms=[animation.Rotate(-360)],
                curve="ease_in_out",
            )
        ],
    )


def get_time(now):
    return render.Padding(
        pad=(2, 0, 2, 0),
        child=render.Animation(
            children=[
                render.Text(
                    content=now.format("15:04"),
                    font="CG-pixel-4x5-mono",
                ),
                render.Text(
                    content=now.format("15:04"),
                    font="CG-pixel-4x5-mono",
                ),
            ]
        ),
    )


def laughing_bounce():
   return animation.Transformation(
        child=render.Image(src=base64.decode(TINY_WHITE), height=16),
        duration=60,
        direction="alternate",
        fill_mode="forwards",
        keyframes=[
            animation.Keyframe(
                percentage=0.0,
                transforms=[animation.Rotate(-360)],
                curve="ease_in_out",
            )
        ],
    )


